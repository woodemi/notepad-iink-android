import org.apache.commons.io.FileUtils
import org.apache.commons.io.filefilter.FileFilterUtils

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion project.ext.compileSdkVersion
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.myscript.notepad_iink"
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // NotepadKit-androidlib depends on kotlin-stdlib & kotlinx-coroutines & kotlinx-serialization
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"

    implementation "androidx.appcompat:appcompat:${project.ext.appcompat}"
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'

    implementation 'pub.devrel:easypermissions:1.0.1'
    implementation 'io.woodemi:NotepadKit-androidlib:2.3.10@aar'

    implementation project(':UIReferenceImplementation')

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

task DownloadAndExtractAssets(type: Copy) {
    def sourceUrls = ["https://s3-us-west-2.amazonaws.com/iink/assets/${project.ext.iinkAsset}/myscript-iink-recognition-diagram.zip",
                      "https://s3-us-west-2.amazonaws.com/iink/assets/${project.ext.iinkAsset}/myscript-iink-recognition-raw-content.zip",
                      "https://s3-us-west-2.amazonaws.com/iink/assets/${project.ext.iinkAsset}/myscript-iink-recognition-math.zip",
                      "https://s3-us-west-2.amazonaws.com/iink/assets/${project.ext.iinkAsset}/myscript-iink-recognition-text-en_US.zip"]
    def targetDir = new File(projectDir, "src/main/assets/")
    def diagramConf = new File(targetDir, "conf/diagram.conf")
    def rawContentConf = new File(targetDir, "conf/raw-content.conf")
    def mathConf = new File(targetDir, "conf/math.conf")
    def textConf = new File(targetDir, "conf/en_US.conf")

    if (!diagramConf.exists() || !rawContentConf.exists() || !mathConf.exists() || !textConf.exists()) {
        def tmpAssetsDir = new File(projectDir, "tmp-assets/")
        def zipDir = new File(tmpAssetsDir, "zips")

        if (!tmpAssetsDir.isDirectory())
            tmpAssetsDir.mkdirs()

        if (!zipDir.isDirectory())
            zipDir.mkdirs()

        sourceUrls.each { sourceUrl ->
            ant.get(src: sourceUrl, dest: zipDir.getPath())
        }

        File[] zipFiles = FileUtils.listFiles(zipDir, FileFilterUtils.suffixFileFilter("zip"), FileFilterUtils.trueFileFilter())
        zipFiles.each { File zipFile ->
            from zipTree(zipFile)
            into tmpAssetsDir
        }
    }
}

task CopyAssets(type: Copy, dependsOn: DownloadAndExtractAssets) {
    def targetDir = new File(projectDir, "src/main/assets/")
    def diagramConf = new File(targetDir, "conf/diagram.conf")
    def rawContentConf = new File(targetDir, "conf/raw-content.conf")
    def mathConf = new File(targetDir, "conf/math.conf")
    def textConf = new File(targetDir, "conf/en_US.conf")

    if (!diagramConf.exists() || !rawContentConf.exists() || !mathConf.exists() || !textConf.exists()) {
        def tmpAssetsDir = new File(projectDir, "tmp-assets/")

        if (!tmpAssetsDir.isDirectory())
            tmpAssetsDir.mkdirs()

        def recognitionAssetDir = new File(tmpAssetsDir, "recognition-assets/")

        println "Copying downloaded assets from $recognitionAssetDir to $targetDir"
        from recognitionAssetDir
        into targetDir

        doLast {
            tmpAssetsDir.deleteDir()
        }
    }
}

preBuild.dependsOn(CopyAssets)
